import json
import os
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponseRedirect
# from .models import Image
from .edge_detection import edge_detection
from PaddleOCR.paddleocr import PaddleOCR
import cv2
from django.shortcuts import render
from PaddleOCR.ppocr.utils.logging import get_logger
from django.shortcuts import redirect
from django.http import JsonResponse
import json
import xlrd
import re
from yolo5_cornerdetection.detect import run

cms_dataset = {
    'P-ACE4-1PACU1INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 338],
    'GIOM2R-DCUINTERFACEFAULT': [53, 54, 55, 56, 57, 58, 59, 60], 'P-ACE4-1FEECU1INTERFACEFAULT': [247],
    'P-ACE6-1PACU1INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 341],
    'FSECU2：NOFSECUOUTPUTTODCU': [167, 168, 169, 170], 'IRS2：NOOUTPUT': [51, 52],
    'P-ACE2-1R-DCESSBUSINTERFACEFAULT': [360], 'HSACE2FAULT': [347, 348, 349, 350, 351],
    'GIOM2B-IOC-3DINTERFACEFAULT': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
                                    24, 25, 26, 27, 28, 29, 30, 31, 32, 161, 162, 163, 164, 167, 168, 169, 170, 178,
                                    179],
    'FUELXFEEDSOV:XFEEDSOV/WRG/DCUFAULT': [153, 154, 155, 156, 157, 158, 159, 160],
    'FCM1BFAULT': [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81,
                   82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
                   106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
                   126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 145, 146, 147, 148, 149, 150, 151,
                   152, 153, 154, 155, 156, 157, 158, 159, 160, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
                   189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
                   209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
                   229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 252, 253, 254, 255, 256, 257, 258, 259, 260,
                   261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
                   281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
                   301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
                   323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 352, 353, 378, 379, 380, 381, 396, 397, 398,
                   399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413],
    'RMLGWOFWSENSOR2：RIGHTMLGWOFWSENSOR2UNREASONABLE': [93, 94, 328, 329, 330],
    'HSACE1/WRG[STICKSHAKER]FAULT': [343, 344, 345, 346], 'P-ACE6-2FCBATTBUSINTERFACEFAULT': [377],
    'HYD2SOVFAIL': [153, 154, 155, 156, 157, 158, 159, 160],
    'RIGHTGSPCUFAULT': [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 145, 146, 147,
                        148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 178, 179],
    'IBWST：OPEN/SHORT/OUTOFRANGE': [210, 211],
    'RMLGWOFWSENSOR1：RIGHTMLGWOFWSENSOR1UNREASONABLE': [91, 92, 276, 277, 278, 279, 302, 303, 304],
    'PACE1：P-ACE1-1FSECU1INTERFACEFAULT': [240],
    'P-ACE6-2PACU2INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 342],
    'GIOM1L-ADC-6INTERFACEFAULT': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
                                   24, 25, 26, 27, 28, 29, 30, 31, 32, 178],
    'P-ACE5-2PACU1INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 340],
    'P-ACE2-2FAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
                      271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
                      290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310,
                      311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
                      330, 331, 332, 333, 335, 362, 363, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 432, 433,
                      434, 435, 436, 437, 438], 'PACE2：P-ACE2-1FSECU2INTERFACEFAULT': [242],
    'LENGSOV:ENGLEFTSOV/WRG/DCUFAULT': [145, 146, 147, 148, 149, 150, 151, 152],
    'FSECU2：NOFSECUDATATODCU': [153, 154, 155, 156, 157, 158, 159, 160],
    'HS-ACE2FAULT': [396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
                     416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431],
    'LIBWST：XDCRNOTROTATING': [103, 104, 184, 185, 204, 205], 'P-ACE1-2R-DCESSBUSINTERFACEFAULT': [358],
    'P-ACE1：P-ACE1-2FAULT': [241],
    'P-ACE1-2PACU1INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
                                    321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333],
    'CANBUS1AFAULT': [378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395],
    'FCM1BR-DCBUSINTERFACEFAULT': [353], 'BCU2：NOB-IOC-8DBUSINPUT': [115, 116, 135, 136, 196, 197, 216, 217, 236, 237],
    'P-ACE5-1FAULT': [248, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
                      270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
                      289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
                      310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
                      329, 330, 331, 332, 333, 339, 370, 371, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406,
                      407, 408, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443],
    'HCLE:HCLEPARTITION2FAILURE': [153, 154, 155, 156, 157, 158, 159, 160], 'APM2NIC2INTERFACEFAULT': [178, 179],
    'PACE2：P-ACE2-2FSECU1INTERFACEFAULT': [243, 244], 'P-ACE2-2L-DCESSBUSINTERFACEFAULT': [362],
    'FUELRIGHTPUMP1：FUELRIGHTPUMP1/PRSW/WRG/RLYFAULT': [145, 146, 147, 148, 149, 150, 151, 152],
    'GSCM:GSCMFAULT': [153, 154, 155, 156, 157, 158, 159, 160], 'GIOM1A-ADC-6INTERFACEFAULT': [179],
    'GIOM1B-IOC-3DINTERFACEFAULT': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
                                    24, 25, 26, 27, 28, 29, 30, 31, 32, 161, 162, 163, 164, 179],
    'FCM2AFAULT': [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81,
                   82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
                   106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
                   126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 145, 146, 147, 148, 149, 150, 151,
                   152, 153, 154, 155, 156, 157, 158, 159, 160, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
                   189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
                   209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
                   229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 354, 355, 414, 415, 416, 417, 418, 419, 420,
                   421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435],
    'RENGSOV:ENGLEFTSOV/WRG/DCUFAULT': [153, 154, 155, 156, 157, 158, 159, 160],
    'FUELRIGHTPUMP2：FUELRIGHTPUMP1/PRSW/WRG/RLYFAULT': [153, 154, 155, 156, 157, 158, 159, 160],
    'FCM2BBCU1INTERFACEFAULTR': [210, 211, 212, 213, 214, 215, 216, 217, 218, 219],
    'P-ACE3-1L-DCESSBUSINTERFACEFAULT': [364],
    'HYD3：SYSTEM3PRESSURETRANSDUCER': [143, 144, 145, 146, 147, 148, 149, 150, 151, 152],
    'NOL-ADC-6BUSOUTPUT': [1, 2, 3, 4], 'NIC1：ASCBPRIMARYBUSFAULT': [39, 40, 171, 172, 173, 174, 175, 176, 177],
    'P-ACE2-1L-DCBUSINTERFACEFAULT': [361],
    'P-ACE3-1PACU1INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336],
    'P-ACE6-2FAULT': [251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
                      270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
                      289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
                      310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
                      329, 330, 331, 332, 333, 342, 377, 396, 397, 398, 399, 400, 401, 402, 414, 415, 416, 417, 432,
                      433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443],
    'FCM2BBCU1INTERFACEFAULT': [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 99, 100, 101, 102, 103,
                                104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
                                121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
                                138, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
                                178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
                                196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 220, 221, 222,
                                223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239],
    'P-ACE3-2PACU2INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 337],
    'CANBUS2BFAULT': [432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445],
    'FCM1AFAULT': [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81,
                   82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
                   106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
                   126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 145, 146, 147, 148, 149, 150, 151,
                   152, 153, 154, 155, 156, 157, 158, 159, 160, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
                   189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
                   209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
                   229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 252, 253, 254, 255, 256, 257, 258, 259, 260,
                   261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
                   281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
                   301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
                   323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 352, 353, 378, 379, 380, 381, 382, 383, 384,
                   385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399],
    'APM1NIC1INTERFACEFAULT': [178, 179],
    'LEFTGSPCUFAULT': [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 145, 146, 147,
                       148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 178, 179], 'APM2FAULT': [179],
    'P-ACE4-1R-DCESSBUSINTERFACEFAULT': [368], 'P-ACE5-2L-DCESSBUSINTERFACEFAULT': [373],
    'ROBWST：OPEN/SHORT/OUTOFRANGE': [129, 130, 230, 231],
    'P-ACE4-1FAULT': [247, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
                      270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
                      289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
                      310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
                      329, 330, 331, 332, 333, 338, 368, 369, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 414,
                      415, 416, 417, 418, 419, 420, 421, 422, 423], 'P-ACE5-2FSECU2INTERFACEFAULT': [249],
    'DCPUMP:DCFUELSTARTPUMP/PRSW/WRG/DCPUMPRLYFAULT': [145, 146, 147, 148, 149, 150, 151, 152],
    'BCU2：INTERNALOBBCUFAULT': [137, 138, 238, 239], 'PACE1：P-ACE1-2FSECU1INTERFACEFAULT': [241],
    'P-ACE2-2PACU2INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335],
    'OILLEVEL/TEMPSENSOR:LENGOILTEMPSENSOROUTOFRANGE': [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,
                                                        158, 159, 160],
    'GIOM1FAULT': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
                   28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 55, 56, 57, 58,
                   59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
                   88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
                   156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 178, 179, 252, 253, 254, 255, 256,
                   257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
                   277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296,
                   297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318,
                   319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 343, 344],
    'P-ACE2-1PACU1INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334],
    'HCLE：HCLEPARTITION1FAILURE': [145, 146, 147, 148, 149, 150, 151, 152],
    'HYD2：HYD2SOVFAIL': [145, 146, 147, 148, 149, 150, 151, 152],
    'LMLGWOFWSENSOR2：LEFTMLGWOFWSENSOR2FAULT': [81, 82, 264, 265, 266, 267, 293, 294, 295],
    'PACE1：P-ACE1-2FSECU2INTERFACEFAULT': [241], 'PACE2：P-ACE2-1FSECU1INTERFACEFAULT': [242],
    'PACE2：P-ACE2-2FSECU2INTERFACEFAULT': [243, 244], 'P-ACE2-2FCBATTBUSINTERFACEFAULT': [363],
    'P-ACE5-1PACU1INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339],
    'GIOM2FAULT': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
                   28, 29, 30, 31, 32, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
                   67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
                   96, 97, 98, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,
                   163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 178, 179, 284, 285, 286, 287, 288, 289, 290,
                   291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 343, 344],
    'APUSOV:APUCONTROLRELAY/WRGFAULT': [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
    'ADC1:NOOUTPUT': [9, 10, 11, 12], 'PACE3：P-ACE3-2FAULT': [246],
    'FUELLEFTPUMP1：FUELLEFTPUMP2/PRSW/WRG/RLYFAULT': [153, 154, 155, 156, 157, 158, 159, 160],
    'P-ACE1-1PACU1INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
                                    321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333],
    'RMLGWOFWSENSOR1：RIGHTMLGWOFWSENSOR1FAULT': [268, 269, 270, 271, 296, 297, 298],
    'HS-ACE1FAULT': [378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 432, 433,
                     434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445],
    'FUELLEFTPUMP2：FUELLEFTPUMP2/PRSW/WRG/RLYFAULT': [145, 146, 147, 148, 149, 150, 151, 152],
    'P-ACE6-2R-DCESSBUSINTERFACEFAULT': [376],
    'LMLGWOFWSENSOR1：LEFTMLGWOFWSENSOR1UNREASONABLE': [95, 96, 331, 332, 333],
    'PACE3：P-ACE3-2FSECU1INTERFACEFAULT': [246],
    'GSCMFAULT': [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 145, 146, 147, 148,
                  149, 150, 151, 152, 178, 179], 'FCM1AL-DCESSBUSINTERFACEFAULT': [352],
    'FCM1BP-ACU2INTERFACEFAULT': [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68],
    'BCU1：INTERNALOBBCUFAULT': [117, 118, 198, 199, 218, 219],
    'P-ACE1-1FAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
                      271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
                      290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308,
                      310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
                      329, 330, 331, 332, 333, 356, 357, 378, 379, 380, 381, 414, 415, 416, 417],
    'P-ACE6-2FSECU1INTERFACEFAULT': [251], 'DCU2：NOOUTPUT': [153, 154, 155, 156, 157, 158, 159, 160],
    'P-ACE5-1FSECU1INTERFACEFAULT': [248], 'PACE3：P-ACE3-2FSECU2INTERFACEFAULT': [246],
    'HYD2：SYSTEM2PRESSURETRANSDUCER': [141, 142], 'P-ACE1：P-ACE1-1FAULT': [240],
    'ROBWST：XDCRNOTROTATING': [127, 128, 228, 229], 'FCM2BL-DCBUSINTERFACEFAULT': [355], 'NICAPM2：APM2FAULT': [178],
    'P-ACE2：P-ACE2-1FAULT': [242], 'LIBWST：OPEN/SHORT/OUTOFRANGE': [105, 106, 186, 187, 206, 207],
    'P-ACE3-2L-DCBUSINTERFACEFAULT': [367], 'TW:TAWSFAULTREPORTED': [167, 168],
    'GIOM2R-DCU-9INTERFACEFAULT': [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
                                   82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 145, 146, 147,
                                   148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 178, 179],
    'P-ACE3-2FAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
                      271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
                      290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310,
                      311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
                      330, 331, 332, 333, 337, 366, 367, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
                      390, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426],
    'P-ACE6-1FSECU1INTERFACEFAULT': [250],
    'GIOM1L-DCU-9INTERFACEFAULT': [53, 54, 55, 56, 57, 58, 59, 60, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
                                   82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 145, 146, 147,
                                   148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 178, 179, 252, 253,
                                   254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
                                   271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
                                   288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304,
                                   305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323,
                                   324, 325, 326, 327, 328, 329, 330, 331, 332, 333], 'NICAPM1：APM1FAULT': [178],
    'P-ACE5-2R-DCBUSINTERFACEFAULT': [372], 'APM1FAULT': [179],
    'P-ACE5-2PACU2INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 340],
    'ADC2：NOR-ADC-6BUSOUTPUT': [17, 18, 19, 20], 'RIBWST：OPEN/SHORT/OUTOFRANGE': [109, 110, 190, 191],
    'FCM2BPACU2INTERFACEFAULT': [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
                                 95, 96, 97, 98, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
                                 159, 160, 178], 'P-ACE2：P-ACE2-2FAULT': [243, 244],
    'RMLGWOFWSENSOR2：LEFTMLGWOFWSENSOR2FAULT': [85, 86],
    'P-ACE3-1PACU2INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336],
    'RMLGWOFWSENSOR1：LEFTMLGWOFWSENSOR1FAULT': [83, 84], 'P-ACE3-1FCBATTBUSINTERFACEFAULT': [365],
    'P-ACE5-1FSECU2INTERFACEFAULT': [248],
    'FCM1BBCU2INTERFACEFAULT': [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 99, 100, 101, 102, 103,
                                104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
                                121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
                                138, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
                                179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
                                196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
                                213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
                                230, 231, 232, 233, 234, 235, 236, 237, 238, 239],
    'LOBWST：XDCRNOTROTATING': [123, 124, 224, 225],
    'FCM2AP-ACU1INTERFACEFAULT': [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68],
    'LPS:OXYPRSW/WRGFAULT': [153, 154, 155, 156, 157, 158, 159, 160],
    'ROLLCONTROLDU：ROLLDISCOUNITFAIL': [145, 146, 147, 148, 149, 150, 151, 152],
    'FSECU1：SLATBIOC6INPUTNOTPRESENT': [167, 168],
    'P-ACE3-1FAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
                      271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
                      290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310,
                      311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
                      330, 331, 332, 333, 336, 364, 365, 378, 379, 380, 381, 382, 383, 384, 414, 415, 416, 417, 418,
                      419, 420], 'HSACE2/WRG[STICKSHAKER]FAULT': [347, 348, 349, 350, 351],
    'GIOM1L-DCUINTERFACEFAULT': [61, 62, 63, 64, 65, 66, 67, 68],
    'P-ACE5-1PACU2INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339],
    'FCM1ABCU2INTERFACEFAULT': [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118],
    'GIOM1A-IOC-3DINTERFACEFAULT': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
                                    24, 25, 26, 27, 28, 29, 30, 31, 32, 165, 166, 167, 168, 169, 170, 178, 179, 284,
                                    285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301,
                                    302, 303, 304, 305, 306, 307, 343, 344],
    'FCM1BPACU2INTERFACEFAULT': [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
                                 95, 96, 97, 98, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
                                 159, 160, 179, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
                                 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282,
                                 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299,
                                 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318,
                                 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333],
    'P-ACE6-1FSECU2INTERFACEFAULT': [250], 'RIBWST：XDCRNOTROTATING': [107, 108, 188, 189, 208, 209],
    'PACU1:OFF/NOOUTPUT': [71, 72], 'ADC2：NOOUTPUT': [25, 26, 27, 28],
    'P-ACE5-2FAULT': [249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
                      270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
                      289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
                      310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
                      329, 330, 331, 332, 333, 340, 372, 373, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388,
                      389, 390, 391, 392, 393, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427,
                      428, 429, 430, 431],
    'LMLGWOFWSENSOR2：LEFTMLGWOFWSENSOR2UNREASONABLE': [97, 98, 280, 281, 282, 283, 305, 306, 307],
    'FCM2BFAULT': [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81,
                   82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
                   106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
                   126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 145, 146, 147, 148, 149, 150, 151,
                   152, 153, 154, 155, 156, 157, 158, 159, 160, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
                   189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
                   209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
                   229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 354, 355, 414, 415, 416, 417, 432, 433, 434,
                   435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445],
    'GIOM2R-ADC-6INTERFACEFAULT': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
                                   24, 25, 26, 27, 28, 29, 30, 31, 32, 178, 179],
    'BCU1：NOA-IOC-8DBUSINPUT': [113, 114, 133, 134, 194, 195, 214, 215, 234, 235],
    'P-ACE5-1R-DCESSBUSINTERFACEFAULT': [370], 'P-ACE3-2R-DCESSBUSINTERFACEFAULT': [366],
    'FCM1ABCU1INTERFACEFAULT': [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 99, 100, 101, 102, 103,
                                104, 105, 106, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
                                133, 134, 135, 136, 137, 138, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
                                156, 157, 158, 159, 160, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
                                191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
                                208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
                                225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239],
    'GIOM1L-AHC-4INTERFACEFAULT': [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 178],
    'GIOM2R-AHC-4INTERFACEFAULT': [47, 48, 49, 50, 51, 52, 171, 172, 173, 174, 175, 179],
    'GIOM2A-IOC-3DINTERFACEFAULT': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
                                    24, 25, 26, 27, 28, 29, 30, 31, 32, 165, 166, 178, 284, 285, 286, 287, 288, 289,
                                    290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306,
                                    307, 343, 344], 'HYD1：HYD1SOVFAIL': [145, 146, 147, 148, 149, 150, 151, 152],
    'P-ACE2-1FAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
                      271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
                      290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310,
                      311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
                      330, 331, 332, 333, 334, 360, 361, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
                      390, 391, 392, 393, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
                      429],
    'P-ACE6-1PACU2INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 341],
    'PACU1：OFF/NOOUTPUT': [87, 88, 272, 273, 274, 275, 299, 300, 301],
    'P-ACE1-2FAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
                      271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
                      290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309,
                      310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
                      329, 330, 331, 332, 333, 358, 359, 396, 397, 398, 399, 432, 433, 434, 435],
    'FCM2BP-ACU2INTERFACEFAULT': [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68],
    'P-ACE5-2FSECU1INTERFACEFAULT': [249], 'PACE3：P-ACE3-1FSECU1INTERFACEFAULT': [245],
    'PITCHCONTROLDU：PITCHDISCOUNITFAIL': [153, 154, 155, 156, 157, 158, 159, 160],
    'P-ACE2-2PACU1INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335],
    'P-ACE2-1PACU2INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334],
    'P-ACE1-2PACU2INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
                                    321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333],
    'PACE1：P-ACE1-1FSECU2INTERFACEFAULT': [240], 'IRS1：NOL-IRS-4BUSOUTPUT': [43, 44],
    'P-ACE1-2FCBATTBUSINTERFACEFAULT': [359], 'HSACE1FAULT': [343, 344, 345, 346],
    'P-ACE5-1L-DCBUSINTERFACEFAULT': [371], 'NIC1：ASCBSECONDARYBUSFAULT': [41, 42, 171, 172, 173, 174, 175, 176, 177],
    'P-ACE3-2PACU1INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 337],
    'FCM2AR-DCESSBUSINTERFACEFAULT': [354], 'P-ACE6-2FSECU2INTERFACEFAULT': [251],
    'PACE3：P-ACE3-1FSECU2INTERFACEFAULT': [245],
    'FCM1APACU1INTERFACEFAULT': [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
                                 95, 96, 97, 98, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
                                 159, 160, 179, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
                                 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282,
                                 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299,
                                 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318,
                                 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333],
    'P-ACE6-1L-DCESSBUSINTERFACEFAULT': [374], 'RMLGWOFWSENSOR2：RIGHTMLGWOFWSENSOR2FAULT': [322, 323, 324],
    'PACU2：OFF/NOOUTPUT': [89, 90, 325, 326, 327],
    'FCM1AP-ACU1INTERFACEFAULT': [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68],
    'LOBWST：OPEN/SHORT/OUTOFRANGE': [125, 126, 226, 227],
    'FCM2APACU1INTERFACEFAULT': [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
                                 95, 96, 97, 98, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
                                 159, 160, 178], 'PACE3：P-ACE3-1FAULT': [245],
    'P-ACE6-1FAULT': [250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
                      270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
                      289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
                      310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
                      329, 330, 331, 332, 333, 341, 374, 375, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406,
                      407, 408, 409, 410, 411, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445],
    'P-ACE1-1L-DCESSBUSINTERFACEFAULT': [356],
    'CANBUS1BFAULT': [396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413],
    'P-ACE1-1PACU2INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320,
                                    321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333],
    'P-ACE4-1PACU2INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 338],
    'P-ACE4-1FCBATTBUSINTERFACEFAULT': [369], 'P-ACE4-1FSECU2INTERFACEFAULT': [247],
    'DCU1：NOOUTPUT': [145, 146, 147, 148, 149, 150, 151, 152], 'P-ACE6-1R-DCBUSINTERFACEFAULT': [375],
    'FCM2ABCU2INTERFACEFAULT': [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 99, 100, 101, 102, 103,
                                104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
                                121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
                                138, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
                                178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
                                196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
                                213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
                                230, 231, 232, 233, 234, 235, 236, 237, 238, 239],
    'FSECU1：NOFSECUOUTPUTTODCU': [169, 170], 'P-ACE1-1R-DCBUSINTERFACEFAULT': [357],
    'FSECU1：NOFSECUDATATODCU': [145, 146, 147, 148, 149, 150, 151, 152],
    'LMLGWOFWSENSOR1：LEFTMLGWOFWSENSOR1FAULT': [79, 80, 319, 320, 321], 'HYD1：SYSTEM1PRESSURETRANSDUCER': [139, 140],
    'P-ACE6-2PACU1INTERFACEFAULT': [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                                    269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
                                    286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
                                    303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
                                    322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 342],
    'NIC1FAULT': [178, 179], 'IRS1：NOOUTPUT': [45, 46],
    'CANBUS2AFAULT': [414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431]}

cas_dataset = {'LPROBEHEATFAULT': [13, 14, 15, 16], '---LDCUB---': [145, 146, 147, 148, 149, 150, 151, 152],
               'ATFAULT': [9, 10, 11, 12, 25, 26, 27, 28, 145, 146, 147, 148, 149, 150, 151, 152],
               'BOBWEIGHTFAULT': [33, 34, 35, 36, 45, 46, 47, 48, 49, 50, 51, 52, 169, 170, 178, 179],
               'RGENOFF': [153, 154, 155, 156, 157, 158, 159, 160],
               'FLTCTRLNODISPATCH': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
                                     24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
                                     45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
                                     66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
                                     87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
                                     106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
                                     122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
                                     138, 139, 140, 141, 142, 143, 144, 161, 162, 163, 164, 165, 166, 167, 168, 169,
                                     170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
                                     186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
                                     202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
                                     218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
                                     234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
                                     250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
                                     266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
                                     282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297,
                                     298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313,
                                     314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
                                     330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
                                     346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361,
                                     362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
                                     378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393,
                                     394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409,
                                     410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425,
                                     426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
                                     442, 443, 444, 445], 'GLDFAULT': [178, 179],
               'HYDHCLEP1FAULT': [145, 146, 147, 148, 149, 150, 151, 152],
               'LGNODISPATCH': [71, 72, 75, 76, 256, 257, 258, 259, 287, 288, 289, 313, 314, 315],
               'ATC-1/2OFF': [145, 146, 147, 148, 149, 150, 151, 152], 'IRS2FAULT': [51, 52],
               'LGWOWSYSFAULT': [77, 78, 260, 261, 262, 263, 290, 291, 292, 316, 317, 318],
               'STICKPUSHERNOTAVAIL': [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
               'RPROBEHEATFAULT': [29, 30, 31, 32], 'PSEUFAULT': [145, 146, 147, 148, 149, 150, 151, 152],
               'YDDEGRADE': [45, 46, 51, 52], 'FLTCTRLMAINT': [178, 179],
               '---LDCUA---': [145, 146, 147, 148, 149, 150, 151, 152],
               'HYD1TEMPSENSORFAULT': [145, 146, 147, 148, 149, 150, 151, 152],
               'HYDHCLEP2FAULT': [153, 154, 155, 156, 157, 158, 159, 160],
               'STEERSYSFAULT': [153, 154, 155, 156, 157, 158, 159, 160],
               'EFISCOMPARATORFAULT': [9, 10, 11, 12, 25, 26, 27, 28, 45, 46, 51, 52],
               'FLAP/SLATMAINTENANCE': [167, 168, 169, 170], 'EFISMISCOMPARE': [37, 38],
               'ATC-1/2FAULT': [145, 146, 147, 148, 149, 150, 151, 152],
               'HYD3TEMPSENSORFAULT': [145, 146, 147, 148, 149, 150, 151, 152],
               'YDFAULT': [153, 154, 155, 156, 157, 158, 159, 160], 'LGENOFF': [145, 146, 147, 148, 149, 150, 151, 152],
               'LGWOWSYSFAIL': [71, 72], 'MACHTRIMFAULT': [9, 10, 11, 12, 25, 26, 27, 28], 'APFAULT': [45, 46, 51, 52],
               'FITCTRLNODISPATCH': [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
               'AUTOBRAKEFAULT': [111, 112, 131, 132, 192, 193, 212, 213, 232, 233],
               'FUELKGLBMISCOMPARE': [153, 154, 155, 156, 157, 158, 159, 160],
               'YDDISC': [45, 46, 51, 52, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
                          160], 'APUGENOFF': [145, 146, 147, 148, 149, 150, 151, 152],
               'FLAPHALFSPEED': [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
               'TAWSGPWSFAULT': [167, 168], 'ANTISKIDFAULT': [101, 102, 121, 122, 182, 183, 202, 203, 222, 223],
               'RSPCFAULT': [153, 154, 155, 156, 157, 158, 159, 160],
               'LSPCFAULT': [145, 146, 147, 148, 149, 150, 151, 152],
               '---RDCUB---': [153, 154, 155, 156, 157, 158, 159, 160], 'FLAPFAULT': [167, 168, 169, 170],
               'SLATHALFSPEED': [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160],
               '---RDCUA---': [153, 154, 155, 156, 157, 158, 159, 160], 'IRS1FAULT': [45, 46]}


class Ocr:
    def __init__(self, image_path, det_model_dir, cls_model_dir, rec_model_dir):
        self.image_path = image_path
        self.det_model_dir = det_model_dir
        self.cls_model_dir = cls_model_dir
        self.rec_model_dir = rec_model_dir
        self.img = cv2.imread(self.image_path)
        if self.img is None:
            logger = get_logger()
            logger.error("error in loading image:{}".format(self.image_path))

    def identify(self):
        # Paddleocr目前支持的多语言语种可以通过修改lang参数进行切换
        # 例如`ch`, `en`, `fr`, `german`, `korean`, `japan`
        ocr = PaddleOCR(self.det_model_dir, self.cls_model_dir, self.rec_model_dir, use_angle_cls=True, lang="ch")
        result = ocr.ocr(self.img, cls=True)
        return result


def CAS(request):
    CAS_list = []
    if request.method == "POST":
        imageSrc = request.FILES.getlist('image')
        if imageSrc:
            for i in range(0, len(imageSrc)):
                image = imageSrc[i]
                # new_img = Image(
                #     name=image.name,
                #     image=image,
                #     res=""
                # )
                # new_img.name_cms=image.name
                # new_img.image_cms=image
                # new_img.save()
                with open("static/image/CAS/" + image.name, 'wb') as f:
                    for c in image.chunks():
                        f.write(c)
                img_path = "static/image/CAS/" + image.name
                print(img_path)


                edge_detection(img_path)

                det_model_dir = "PaddleOCR/inference/ch_ppocr_server_v2.0_det_infer"
                cls_model_dir = "PaddleOCR/inference/ch_ppocr_mobile_v2.0_cls_infer"
                rec_model_dir = "PaddleOCR/inference/ch_ppocr_server_v2.0_rec_infer"
                ocr = Ocr(img_path, det_model_dir, cls_model_dir, rec_model_dir)
                ocr_result = ocr.identify()
                ocr_list = []

                for line in ocr_result:
                    print(line)
                print(len(ocr_result))

                img = cv2.imread(img_path)
                h = img.shape[0]
                w = img.shape[1]
                h /= 2
                w /= 2
                print(img.shape)
                print(h)
                print(w)

                for item in ocr_result:
                    if item[0][1][0] >= w and item[0][0][1] <= h:
                        ocr_list.append(item[1][0])

                CAS_list.append({"id": i, "res": ocr_list})

            res_all = {"res_all": CAS_list}
            print(res_all)
            if os.path.exists(img_path):
                os.remove(img_path)
            return JsonResponse(res_all, json_dumps_params={"ensure_ascii": False})
        else:
            return HttpResponse('上传失败')


def CAS_find(cas_list):
    for i in range(0, len(cas_list)):
        cas_list[i] = cas_list[i].replace(' ', '')
        cas_list[i] = cas_list[i].upper()
    print(cas_list)
    A = set()
    for item in cas_list:
        if item in cas_dataset.keys():
            A = A | set(cas_dataset[item])  # 倒排索引结果取并集
    A = list(A)
    print(A)
    res = rte_data(A, 2)
    for i in A:
        for j in range(0,len(res[i])):
            res[i][j] = res[i][j].replace(" ","")
            res[i][j] = res[i][j].upper()
    print(res)
    hit = []
    for i in A:
        if set(res[i]) <= set(cas_list):
            hit.append(i)
    print(hit)
    ans = {}

    ans["cas_hit"] = hit
    return ans


def CAS_confirm(request):
    if request.method == "POST":
        data = json.loads(request.body)
        cas = data.get('res_all')
        print(data)
        print(type(data))
        print(cas)
        print(type(cas))
        cas_list = []
        print(cas_list)
        for i in range(0, len(cas)):
            cas_list.extend(cas[i]["res"])
        ans = CAS_find(cas_list)
        print(ans)
        return JsonResponse(ans, json_dumps_params={"ensure_ascii": False})

    else:
        return HttpResponse('上传失败')


def CMS(request):
    CMS_list = []
    if request.method == "POST":
        imageSrc = request.FILES.getlist('image')
        if imageSrc:
            for i in range(0, len(imageSrc)):
                image = imageSrc[i]
                # new_img = Image(
                #     name=image.name,
                #     image=image,
                #     res=""
                # )
                # new_img.name_cms=image.name
                # new_img.image_cms=image
                # new_img.save()
                with open("static/image/CMS/" + image.name, 'wb') as f:
                    for c in image.chunks():
                        f.write(c)
                img_path = "static/image/CMS/" + image.name
                print(img_path)

                state = run(source=img_path)
                print("state=", state) #0正常 1缺角重传
                if state == 1:
                    res_all = {'state': 0}  # state 0 缺角
                    res_all['res_all']=[]
                    if os.path.exists(img_path):
                        os.remove(img_path)
                    return JsonResponse(res_all, json_dumps_params={"ensure_ascii": False})

                edge_detection(img_path)
                # run()

                det_model_dir = "PaddleOCR/inference/ch_ppocr_server_v2.0_det_infer"
                cls_model_dir = "PaddleOCR/inference/ch_ppocr_mobile_v2.0_cls_infer"
                rec_model_dir = "PaddleOCR/inference/ch_ppocr_server_v2.0_rec_infer"
                ocr = Ocr(img_path, det_model_dir, cls_model_dir, rec_model_dir)
                ocr_result = ocr.identify()
                ocr_list = []
                for line1 in ocr_result:
                    if line1[1][0].find("LRU:") != -1 or line1[1][0].find("RU:") != -1 or line1[1][0].find(
                            "LRU：") != -1 or \
                            line1[1][0].find("RU：") != -1 or \
                            line1[1][0].find("LRU;") != -1 or line1[1][0].find("RU;") != -1 or line1[1][0].find(
                        "LRU；") != -1 or line1[1][0].find("RU；") != -1 or \
                            line1[1][0].find("LRUS") != -1 or line1[1][0].find("LRUs") != -1:  # 找 LRU
                        # ocr_list.append(line1)
                        dis = line1[0][3][1] - line1[0][0][1]
                        # print('dis=', dis)
                        for line2 in ocr_result:
                            if line1[0][0][1] + dis + int(dis / 4) <= line2[0][0][1] <= line1[0][0][
                                1] + 2 * dis + dis / 3 and line2[0][0][1] - line1[0][3][1] >= 5 and line2[0][0][0] - \
                                    line1[0][0][0] <= 100 \
                                    and line2[1][0].find("NEXT PAGE") == -1:
                                ocr_list.append(line2[1][0])

                # print(ocr_list)
                # new_img.res_cms=ocr_list
                # new_img.save()

                CMS_list.append({"id": i, "res": ocr_list})

            res_all = {"res_all": CMS_list}
            res_all['state']=1
            print(res_all)
            if os.path.exists(img_path):
                os.remove(img_path)
            return JsonResponse(res_all, json_dumps_params={"ensure_ascii": False})
        else:
            return HttpResponse('上传失败')


# maintenance messages 3
# fault report path    5
# fault report         6
# 可能的故障原因          9
# 排故提示              10
def rte_data(no, col):
    work_dir = os.path.dirname(os.path.abspath(__file__))
    pth = os.path.join(work_dir, 'data.xls')
    book = xlrd.open_workbook(pth)
    sheet = book.sheet_by_name('Sheet1')
    res = {}
    for i in no:
        tmp = sheet.row_values(i)[col].split('\n')
        item = []
        for j in tmp:
            # j = j.replace("\r", "")
            # j = j.replace(' ', "")
            if j != "":
                item.append(j)
        res[i] = item
    return res




def CMS_find(cms_list, cas_hit):
    for i in range(0, len(cms_list)):
        cms_list[i] = cms_list[i].replace(' ', '')
        cms_list[i] = cms_list[i].upper()
    A = set()
    for item in cms_list:
        if item in cms_dataset.keys():
            A = A | set(cms_dataset[item])  # 倒排索引结果取并集
    A = list(A)
    print(A)
    res = rte_data(A, 3)
    # print(res)
    for index in A:
        for j in range(0,len(res[index])):
            res[index][j] = res[index][j].replace("\r", "")
            res[index][j] = res[index][j].replace(' ', "")
    # print(res)

    hit_tmp = []
    for i in A:
        if set(res[i]) <= set(cms_list):
            hit_tmp.append(i)
    # print(hit_tmp)
    hit = list(set(hit_tmp).intersection(set(cas_hit)))
    print(hit)
    frp = rte_data(hit, 5)
    print(frp)
    flag = 0
    for i in hit:
        if len(frp[i]) != 0 and frp[i][0] != '/' and frp[i][0] != '未记录':
            flag = 1
            break
    if flag == 0:  # fault report path 为空，返回排故提示
        ans = {}
        ans["res"] = []

        if len(hit)==0:
            ans["res"]="未命中"
        else:
            fault_info = rte_data(hit, 10)
            # reas = rte_data(hit, 9)
            for i in hit:
                ans["res"].extend(fault_info[i])
                # ans["res"].extend(reas[i])
        ans["status"] = 0  # 直接返回排故提示
        print(ans)
        return ans
    else:  # 返回 fault report path
        ans = {}
        tmp = []
        for i in hit:
            tmp.extend(frp[i])
        ans["status"] = 1  # 返回fault report path
        ans["res"] = tmp
        ans["hit"] = hit
        print(ans)
        return ans



@csrf_exempt
def CMS_confirm(request):
    if request.method == "POST":
        data = json.loads(request.body)
        cms = data.get('res_all')
        cas_hit = [i for i in range(0,1000)]
        if 'cas_hit' in data:
            cas_hit = data['cas_hit']
        print(data)
        print(type(data))
        print(cms)
        print(type(cms))
        print(cas_hit)
        cms_list = []
        for i in range(0, len(cms)):
            cms_list.extend(cms[i]["res"])
        ans = CMS_find(cms_list, cas_hit)

        return JsonResponse(ans, json_dumps_params={"ensure_ascii": False})

    else:
        return HttpResponse('上传失败')


def cal_miss(tmp0):
    miss = []  # 插入缺失值
    if (len(tmp0) >= 3):
        delta0_list = [tmp0[1][0] - tmp0[0][0], tmp0[2][0] - tmp0[1][0], tmp0[-1][0] - tmp0[-2][0],
                       tmp0[-2][0] - tmp0[-3][0]]
        delta0_list.sort()
        delta0 = (delta0_list[1] + delta0_list[2]) / 2
    else:
        delta0 = 16
    n_delta = delta0
    for i in range(0, len(tmp0) - 1):
        if tmp0[i + 1][0] - tmp0[i][0] >= n_delta + n_delta - 3:
            miss.append(i + 1)
        else:
            n_delta = (tmp0[i + 1][0] - tmp0[i][0] + n_delta) / 2
    for i in range(1, len(miss)):
        miss[i] += i
    for i in range(0, len(miss)):
        tmp0.insert(miss[i], [0, "???"])
    return tmp0


def FR(request):
    FR_list = []
    print(1)
    if request.method == "POST":
        print("POST")
        imageSrc = request.FILES.getlist('image')
        print(imageSrc)
        if imageSrc:
            for k in range(0, len(imageSrc)):
                image = imageSrc[k]
                with open("static/image/FR/" + image.name, 'wb') as f:
                    for c in image.chunks():
                        f.write(c)
                img_path = "static/image/FR/" + image.name
                print(img_path)

                state = run(source=img_path)
                if state == 1:
                    res_all = {'state': 0}
                    res_all['res_all'] = []
                    if os.path.exists(img_path):
                        os.remove(img_path)
                    return JsonResponse(res_all, json_dumps_params={"ensure_ascii": False})

                edge_detection(img_path)
                # run(source="static/image/FR")

                det_model_dir = "PaddleOCR/inference/ch_ppocr_server_v2.0_det_infer"
                cls_model_dir = "PaddleOCR/inference/ch_ppocr_mobile_v2.0_cls_infer"
                rec_model_dir = "PaddleOCR/inference/ch_ppocr_server_v2.0_rec_infer"
                ocr = Ocr(img_path, det_model_dir, cls_model_dir, rec_model_dir)
                ocr_result = ocr.identify()

                # for line in ocr_result:
                #     print(line)
                # print(len(ocr_result))
                # print('\n')
                result = []
                # 找表头
                tmp = []
                for i in range(0, len(ocr_result)):
                    if ("MONITORNAME" in ocr_result[i][1][0] or "MONITORNANE" in ocr_result[i][1][
                        0] or "MONITOR NAME" in
                            ocr_result[i][1][0] or "NONITOR NANE" in ocr_result[i][1][0] or "MONITOR NANE" in
                            ocr_result[i][1][0]):
                        tmp.append((ocr_result[i][0][0], ocr_result[i][0][1], ocr_result[i][1][0]))  # 找 monitor name
                        x = ocr_result[i][0][0][0]

                        if "ACE" in ocr_result[i - 1][1][0] or "FCM" in ocr_result[i - 1][1][0] or "1A" in \
                                ocr_result[i - 1][1][0] or "1B" in ocr_result[i - 1][1][0]:
                            tmp.append(((ocr_result[i - 1][0][0], ocr_result[i - 1][0][1], ocr_result[i - 1][1][0])))
                        if "ACE" in ocr_result[i - 2][1][0] or "FCM" in ocr_result[i - 2][1][0] or "1A" in \
                                ocr_result[i - 2][1][0] or "1B" in ocr_result[i - 2][1][0]:
                            tmp.append(((ocr_result[i - 2][0][0], ocr_result[i - 2][0][1], ocr_result[i - 2][1][0])))
                        if "ACE" in ocr_result[i + 1][1][0] or "FCM" in ocr_result[i + 1][1][0] or "1A" in \
                                ocr_result[i + 1][1][0] or "1B" in ocr_result[i + 1][1][0]:
                            tmp.append(((ocr_result[i + 1][0][0], ocr_result[i + 1][0][1], ocr_result[i + 1][1][0])))
                        if "ACE" in ocr_result[i + 2][1][0] or "FCM" in ocr_result[i + 2][1][0] or "1A" in \
                                ocr_result[i + 2][1][0] or "1B" in ocr_result[i + 2][1][0]:
                            tmp.append(((ocr_result[i + 2][0][0], ocr_result[i + 2][0][1], ocr_result[i + 2][1][0])))
                tmp.sort()
                title = []
                tmp_ = []
                for i in tmp:
                    title.append(i)
                for i in tmp:
                    # print(i)
                    tmp_.append(i[2])
                result.append(tmp_)
                # print(tmp)
                # print(tmp_)

                if (len(title) == 3):
                    dis0 = title[0][0][0]
                    dis1m = title[1][0][0]
                    dis1M = title[1][1][0]
                    dis2m = title[2][0][0]
                    dis2M = title[2][1][0]
                    tmp0 = []
                    tmp1 = []
                    tmp2 = []
                    for line in ocr_result:
                        if (dis0 - 15) <= line[0][0][0] <= (dis0 + 15) and line[1][0].find("RETURN") == -1 and line[1][
                            0] != \
                                tmp[0][2]:  # 不为 monitor name 且不为 return
                            str = []
                            str.append((line[0][0][1], line[1][0]))
                            for line1 in ocr_result:
                                if line[0][0][1] - 5 <= line1[0][0][1] <= line[0][0][1] + 5 and line1 != line and len(
                                        line1[1][0]) != 1:
                                    str.append((line1[0][0][1], line1[1][0]))
                            str.sort()
                            ss = ""
                            for i in str:
                                ss += i[1]
                            tmp0.append((str[0][0], ss))

                    for line in ocr_result:
                        if (dis1m - 15) <= line[0][0][0] <= dis1M and len(line[1][0]) == 1 and line[0][0][1] > \
                                title[1][0][
                                    1]:  # 不为title
                            tmp1.append((line[0][0][1], line[1][0]))
                    for line in ocr_result:
                        if dis2m - 15 <= line[0][0][0] <= dis2M and len(line[1][0]) == 1 and line[0][0][1] > \
                                title[2][0][
                                    1]:  # 不为title
                            tmp2.append((line[0][0][1], line[1][0]))
                    # print(tmp0)
                    # print(len(tmp0))
                    # print(tmp1)
                    # print(len(tmp1))
                    # print(tmp2)
                    # print(len(tmp2))
                    if (len(tmp0) == len(tmp1) == len(tmp2)):
                        tmp0.sort()
                        tmp1.sort()
                        tmp2.sort()
                        for i in range(0, len(tmp0)):
                            tmp = []
                            tmp.append(tmp0[i][1])
                            tmp.append(tmp1[i][1])
                            tmp.append(tmp2[i][1])
                            result.append(tmp)
                        # for i in range(0, len(result)):
                        #     print(result[i])
                    else:
                        tmp0.sort()
                        tmp1.sort()
                        tmp2.sort()
                        tmp0 = cal_miss(tmp0)
                        tmp1 = cal_miss(tmp1)
                        tmp2 = cal_miss(tmp2)
                        # print(len(tmp0), len(tmp1), len(tmp2))
                        for i in range(0, min(len(tmp0), len(tmp1), len(tmp2))):
                            tmp = []
                            tmp.append(tmp0[i][1])
                            tmp.append(tmp1[i][1])
                            tmp.append(tmp2[i][1])
                            result.append(tmp)
                        # for i in range(0, len(result)):
                        #     print(result[i])

                if (len(title) == 2):
                    dis0 = title[0][0][0]
                    dis1m = title[1][0][0]
                    dis1M = title[1][1][0]
                    tmp0 = []
                    tmp1 = []
                    for line in ocr_result:
                        if (dis0 - 15) <= line[0][0][0] <= (dis0 + 15) and line[1][0].find("RETURN") == -1 and line[1][
                            0] != \
                                tmp[0][
                                    2]:  # 不为 monitor name 且不为 return
                            str = []
                            str.append((line[0][0][1], line[1][0]))
                            for line1 in ocr_result:
                                if line[0][0][1] - 5 <= line1[0][0][1] <= line[0][0][1] + 5 and line1 != line and len(
                                        line1[1][0]) != 1:
                                    str.append((line1[0][0][1], line1[1][0]))
                            str.sort()
                            ss = ""
                            for i in str:
                                ss += i[1]
                            tmp0.append((str[0][0], ss))
                    for line in ocr_result:
                        if (dis1m - 15) <= line[0][0][0] <= dis1M and len(line[1][0]) == 1 and line[0][0][1] > \
                                title[1][0][
                                    1]:
                            tmp1.append((line[0][0][1], line[1][0]))
                    if (len(tmp0) == len(tmp1)):
                        tmp0.sort()
                        tmp1.sort()

                        for i in range(0, len(tmp0)):
                            tmp = []
                            tmp.append(tmp0[i][1])
                            tmp.append(tmp1[i][1])

                            result.append(tmp)
                        # for i in range(0, len(result)):
                        #     print(result[i])
                    else:
                        tmp0.sort()
                        tmp1.sort()
                        tmp0 = cal_miss(tmp0)
                        tmp1 = cal_miss(tmp1)
                        # print(len(tmp0), len(tmp1))
                        for i in range(0, min(len(tmp0), len(tmp1))):
                            tmp = []
                            tmp.append(tmp0[i][1])
                            tmp.append(tmp1[i][1])
                            result.append(tmp)
                        # for i in range(0, len(result)):
                        #     print(result[i])

                FR_list.append({"id": k, "res": result})
                res_all = {"res_all": FR_list}
                res_all['state'] = 1
                print(res_all)
                if os.path.exists(img_path):
                    os.remove(img_path)
                return JsonResponse(res_all, json_dumps_params={"ensure_ascii": False})
            else:
                return HttpResponse('上传失败')

def FR_reg(ss):
    ss=ss.replace(',','')
    ss=ss.replace('，','')
    print(ss)
    pos = len(ss)-1
    cnt = 0
    res = []
    while cnt<2 and ss[pos].isalpha()==False and pos>=0 and ss[pos]!=':' and ss[pos]!='：':
        if ss[pos]=='0' or ss[pos]=='。':
            res.insert(0, '0')
            cnt += 1
        elif ss[pos]=='1':
            res.insert(0,'1')
            cnt += 1
        pos -= 1
    tmp = ss[:pos+1]
    res.insert(0,tmp)
    print(res)
    return res




def FR_resolove(fr_res):
    res = []
    for item in fr_res:
        tmp = []
        if type(item['res'][0]) == str:
            item['res'][0] = item['res'][0].replace(',', '')
            item['res'][0] = item['res'][0].replace('，', '')
            item['res'][0] = re.split(":|：",item['res'][0])
        item['res'][0]= [i for i in item['res'][0] if i != ""]
        print(item['res'][0])
        for i in range(1, len(item["res"])):
            if type(item['res'][i]) == str:
                item['res'][i] = FR_reg(item['res'][i])

        for i in range(0, len(item["res"])):
            for j in range(0, len(item['res'][i])):
                item['res'][i][j] = item['res'][i][j].replace(':', '')
                item['res'][i][j] = item['res'][i][j].replace('：', '')
        print(item)

        # test
        if 'frp' not in item:
            item['frp'] = 'MONITOR STATUSES'
        if len(item['res'][0]) == 2:
            for i in range(1, len(item['res'])):
                tmp.append(item['res'][i][0] + '=' + item['res'][i][1])

            # print(tmp)
            assert "frp" in item.keys(), "frp"
            res.append([tmp, item['frp']])
        elif len(item['res'][0]) == 3:
            for i in range(1, len(item['res'])):
                # print(item['res'][i][0])
                ss1 = item['res'][i][0] + '=' + item['res'][i][1] + "," + item['res'][i][2]

                tmp.append(ss1)
            assert "frp" in item.keys(), "frp"
            res.append([tmp, item['frp']])

    return res


def FR_find(fr_list, cms_hit):
    hit = []
    for i in range(0, len(fr_list)):
        fr_list[i][1] = fr_list[i][1].replace(' ', "")  # frp
        for j in range(0, len(fr_list[i][0])):
            fr_list[i][0][j] = fr_list[i][0][j].replace(' ', '')  # fr
            fr_list[i][0][j] = fr_list[i][0][j].replace(':', '')
            fr_list[i][0][j] = fr_list[i][0][j].upper()
    # print(fr_list)
    for h in cms_hit:
        FRP = rte_data([h], 5)
        FRP[h][0]=FRP[h][0].replace(' ','')
        print(FRP)
        s = ""
        if len(FRP[h]) > 0:
            s = FRP[h][0]
            s = s.split(",")
            # print(s)
        tmp = []
        for i in range(0, len(fr_list)):
            for j in range(0, len(s)):
                # print(fr_list[i][1])
                if fr_list[i][1] in s[j]:
                    tmp.extend(fr_list[i][0])
        print(h, tmp)
        res = rte_data([h], 6)
        for i in range(0,len(res[h])):
            res[h][i]=res[h][i].replace(' ','')
        print(h, res)
        if set(res[h]) <= set(tmp):
            hit.append(h)

    hit = list(hit)
    print(hit)
    ans={}
    sugg = rte_data(hit, 10)
    reas = rte_data(hit, 9)
    ans["reason"]=[]
    ans["suggestion"]=[]
    for i in hit:
        ans["reason"].extend(reas[i])
        ans["suggestion"].extend(sugg[i])

    return ans


def FR_confirm(request):
    if request.method == "POST":
        print(1)
        data = json.loads(request.body)
        # fr = data.get('res_all')
        print(data)
        print(type(data))
        # print(fr)
        # print(type(fr))
        fr_list = FR_resolove(data["res_all"]["fr_res"])
        print(fr_list)
        ans = FR_find(fr_list, data["res_all"]["hit"])
        print(ans)
        return JsonResponse(ans, json_dumps_params={"ensure_ascii": False})
    else:
        return HttpResponse('上传失败')
